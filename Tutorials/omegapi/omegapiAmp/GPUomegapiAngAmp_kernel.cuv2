//July 26th 2019, Based on DOI: 10.1016/0550-3213(84)90382-1


#include <stdio.h>

#include "GPUManager/GPUCustomTypes.h"
#include "GPUManager/CUDA-Complex.cuh"

#include "breakupMomentum.cuh"
#include "barrierFactor.cuh"

///////////////////////////////////////////////////
#include "cuda.h"

#include "GPUUtils/lorentzBoost.cuh"
#include "GPUUtils/threeVector.cuh"
#include "GPUUtils/wignerD.cuh"
#include "GPUUtils/clebsch.cuh"

///////////////////////////////////////////
#define ADD4(a,b) { a[0]+b[0], a[1]+b[1], a[2]+b[2], a[3]+b[3] }

#define MASS(v)   (G_SQRT(v[0]*v[0]-v[1]*v[1]-v[2]*v[2]-v[3]*v[3]))

#define Nterm(J)  (G_SQRT((2*J+1)/(4*M_PI)))


// Macro to ease definition of loops
#define LOOP(INDEX,START,END,INC) for (int INDEX=START;INDEX<=END;INDEX+=INC)
////////////////////////////////////////////////////////////////////////////////////////
 __device__ GDouble DegToRad = 3.14159265358979323846/180.0;
 __device__ GDouble pararray[22];

//Create array of lmLM:
int lmLM[25][4] = {{0,0,0,0}, {0,0,2,0}, {0,0,2,1}, {0,0,2,2}, {2,0,0,0}, {2,0,2,0}, {2,0,2,1}, {2,0,2,2}, {2,1,2,0}, {2,1,2,1}, {2,1,2,2}, {2,2,2,0}, {2,2,2,1}, {2,2,2,2}, {2,1,1,1}, {0,0,1,0}, {0,0,1,1}, {2,1,1,0}, {2,1,1,1}, {2,1,2,1}, {2,1,2,2}, {2,2,2,1}, {2,2,2,2}, {2,0,1,0}, {2,0,1,1}};


static __device__ void //note: 4-vector input presumed
rotateZ( GDouble* v, GDouble phi ){
  GDouble sinphi = G_SIN(phi);
  GDouble cosphi = G_COS(phi);
  GDouble tx;
  tx   = v[1] * cosphi - v[2] * sinphi;
  v[2] = v[2] * cosphi + v[1] * sinphi;
  v[1] = tx;
}

static __device__ void //note: 4-vector input presumed
rotateY ( GDouble* v, GDouble theta) {
  double sinphi = G_SIN(theta);
  double cosphi = G_COS(theta);
  double tz;
  tz = v[3] * cosphi - v[1] * sinphi;
  v[1] = v[1] * cosphi + v[3] * sinphi;
  v[3] = tz;
}

static __device__ GDouble  //note: 3-vector input presumed
theta( GDouble* pv ){
  GDouble r= G_SQRT(pv[0]*pv[0] + pv[1]*pv[1]);
  return  G_ATAN2( r , pv[2] );
}


//static __device__ GDouble  //note: 3-vector input presumed
//phi( GDouble* pv ){
//  return  G_ATAN2( pv[1] , pv[0] );
//}


static __device__ void
MoveToRF(GDouble *parent, GDouble *daughter)
{
  GDouble *par3vec=parent+1;
  rotateZ( daughter , -phi(par3vec) );
  rotateY( daughter , -theta(par3vec) );

  GDouble beta[]={0,0, -G_SQRT(dot(par3vec,par3vec))/parent[0]};
  //** (x)  Might this be bootToRest???
  // beta is defined to boost to parent's rest frame
  // I just adapted GPUUtil boost fcn with vector beta input
  boost( daughter , beta );

}



static __device__ WCUComplex
BreitWigner_loc(GDouble m0, GDouble Gamma0, int L,
                GDouble *P1, GDouble *P2)
{
  
  GDouble  Ptot[4] = ADD4(P1, P2);  
  GDouble m  = MASS(Ptot);
  GDouble mass1 = MASS(P1);
  GDouble mass2 = MASS(P2);
  
  
  // assert positive breakup momenta     
  GDouble q0 = fabs( breakupMomentum(m0, mass1, mass2) );
  GDouble q  = fabs( breakupMomentum(m,  mass1, mass2) );
  
  //printf("BW: (%5.3f, %5.3f, %d) m=%6.4f m1=%6.4f m2=%6.4f q=%6.4f q0=%6.4f\n",
  //  m0,Gamma0,L,m,mass1,mass2,q,q0);
  
  GDouble F0 = L==0 ? 1.0 : barrierFactor(q0, L);
  GDouble F  = L==0 ? 1.0 : barrierFactor(q,  L);
  
  GDouble width_coef=Gamma0*(m0/m);
  //GDouble qq0=q/q0;
  //GDouble width_qdep = (L==0 ? qq0 : (L==1 ? qq0*qq0*qq0 : pow(qq0,2*L+1)))*((F*F)/(F0*F0));
  GDouble width_qdep = q/q0  * (F*F)/(F0*F0);
  //GDouble num_qdep = (L==0 ? q : (L==1 ? q*q*q : pow(q,2*L+1)))*(F*F);
  GDouble num_qdep = q*(F*F);
  
  GDouble width = width_coef * width_qdep;
  
  //complex<GDouble> bwtop(m0 * width, 0.0 );
  WCUComplex bwtop = { G_SQRT(m0*width_coef) * num_qdep, 0 };
  
  WCUComplex bwbottom =  { m0*m0 - m*m  , -1.0 * ( m0 * width ) };
  
  return  ( bwtop / bwbottom );
  
}

static __device__ WCUComplex  //note: 3-vector input presumed
sqrtIntensity(GDouble polfrac, GDouble b1mass, GDouble prod_angle, GDouble* vector){

	double intensity = 0.0;
	double real_sqrt_intensity = 0.0;
	double ima_sqrt_intensity = 0.0;

	intensity = 1;// wdist(0, b1mass, prod_angle, vector) - polfrac * wdist(1, b1mass, Phi, vector) * G_COS(2.0 * prod_angle) -  polfrac * wdist(2, b1mass, prod_angle, vector) * G_SIN(2.0 * prod_angle);
	
       if (intensity >= 0.0) real_sqrt_intensity = G_SQRT(intensity);
       if (intensity < 0.0) ima_sqrt_intensity = G_SQRT(abs(intensity));
	
	WCUComplex sqrt_intensity = {real_sqrt_intensity, ima_sqrt_intensity};
	//cout << "intensity = " << intensity << ", sqrt_intensity = " << sqrt_intensity << endl;
       return sqrt_intensity;
}


/////////////////////////////////////////////////////////////////////////////////////////
__global__ void
GPUomegapiAngAmp_kernel( GPU_AMP_PROTO, GDouble m_1p, GDouble m_w_1p, GDouble m_n_1p, GDouble m_1m, GDouble m_w_1m, GDouble m_n_1m,
                            GDouble m_0m, GDouble m_w_0m, GDouble m_n_0m, GDouble m_ds_ratio, GDouble m_phi0_1p,
                            GDouble m_theta_1p, GDouble m_phip_1p, GDouble m_phim_1p, GDouble m_psi_1p,
			    GDouble m_phi0_1m, GDouble m_theta_1m, GDouble m_phip_1m, GDouble m_phim_1m,
                            GDouble m_psi_1m, GDouble m_phi0_0m, GDouble m_theta_0m, bool useCutoff, GDouble polAngle, GDouble polFraction ){

	int iEvent = GPU_THIS_EVENT;
        
    pararray[0] = m_1p;
    pararray[1] = m_w_1p;
    pararray[2] = m_n_1p;
    pararray[3] = m_1m;
    pararray[4] = m_w_1m;
    pararray[5] = m_n_1m;
    pararray[6] = m_0m;
    pararray[7] = m_w_0m;
    pararray[8] = m_n_0m;
    pararray[9] = m_ds_ratio;
    pararray[10] = m_phi0_1p;
    pararray[11] = m_theta_1p;
    pararray[12] = m_phip_1p;
    pararray[13] = m_phim_1p;
    pararray[14] = m_psi_1p;
    pararray[15] = m_phi0_1m;
    pararray[16] = m_theta_1m;
    pararray[17] = m_phip_1m;
    pararray[18] = m_phim_1m;
    pararray[19] = m_psi_1m;
    pararray[20] = m_phi0_0m;
    pararray[21] = m_theta_0m;

//////////////////////////////////////////// Get and create 4-vectors /////////////////////////////////////////
  GDouble  beam     [4] = GPU_P4(0);
  GDouble  target   [4] = {0.938, 0.0, 0.0, 0.0};
  GDouble  recoil   [4] = GPU_P4(1);
  GDouble  b1s_pi   [4] = GPU_P4(2);
  GDouble  omegas_pi[4] = GPU_P4(3);
  GDouble  rhos_pip [4] = GPU_P4(4);
  GDouble  rhos_pim [4] = GPU_P4(5);

  //  Make four-vector sums
  GDouble  rho   [4] = ADD4(rhos_pip, rhos_pim );
  GDouble  omega [4] = ADD4(rho,     omegas_pi);
  GDouble  b1    [4] = ADD4(omega,   b1s_pi);
  GDouble  gammap[4] = ADD4(beam,   target);

//////////////////////////////////////////// Calculate omega pi helicity angles /////////////////////////////////////////

  //omega angles in b1 decay the daughter = omega, parent = b1, InverseOfX = beam, rf = gammap
  MoveToRF(gammap,beam);
  MoveToRF(gammap,b1);
  MoveToRF(gammap,omega);    MoveToRF(b1,omega);

  GDouble z[3] = { b1[1], b1[2], b1[3] };
  makeUnit( z );
  GDouble y[3] = { beam[1], beam[2], beam[3] };
  cross( y, z );
  makeUnit( y );
  GDouble x[3] = { y[0], y[1], y[2] };
  cross( x, z );

  GDouble *omega_3vec=omega+1;
  GDouble ang_omega[]={dot(omega_3vec, x),
                    dot(omega_3vec, y),
                    dot(omega_3vec, z)};
  GDouble omega_theta = theta(ang_omega);
  GDouble omega_phi      = phi(ang_omega);
  
  GDouble eps[3] = {G_COS(polAngle*DegToRad), G_SIN(polAngle*DegToRad), 0.0}; // beam polarization vector
  GDouble eps_cross_y[3] = { eps[0], eps[1], eps[2] };
  cross( eps_cross_y, y );
  GDouble inverseofx[3] = { -x[0], -x[1], -x[2] }; //{ beam[1], beam[2], beam[3] };//makeUnit( inverseofx_unit );

  GDouble prod_angle = G_ATAN2(dot(y, eps), dot(inverseofx, eps_cross_y) );

////////////////////////////////////////////
  
//normal to the piplus+piminus plane angles in the b1 decay the daughter = piplus, parent = omega, InverseOfX = b1, rf = gammap, seconddaughter = piminus
  MoveToRF(gammap,rhos_pip); MoveToRF(b1,rhos_pip); MoveToRF(omega,rhos_pip);
  MoveToRF(gammap,rhos_pim); MoveToRF(b1,rhos_pim); MoveToRF(omega,rhos_pim);
  
  GDouble zh[3] = { omega[1], omega[2], omega[3] };
  makeUnit( zh );
  GDouble yh[3] = { b1[1], b1[2], b1[3] };
  cross( yh, zh );
  makeUnit( yh );
  GDouble xh[3] = { yh[0], yh[1], yh[2] };
  cross( xh, zh );

  GDouble normal_3vec[3] = { rhos_pip[1], rhos_pip[2], rhos_pip[3] };
  cross( normal_3vec, rhos_pim );
  makeUnit( normal_3vec );

  GDouble ang_normal[]={dot(normal_3vec, xh),
                    dot(normal_3vec, yh),
                    dot(normal_3vec, zh)};
  GDouble normal_theta = theta(ang_normal);
  GDouble normal_phi   = phi(ang_normal);
/////////////////////////////////////////////////////////////////   

  GDouble b1mass = MASS(b1);

  GDouble q = breakupMomentum( MASS(b1), MASS(omega), MASS(b1s_pi) );

  GDouble alpha = phi( &(recoil[1]) );

  GDouble cosAlpha=G_COS(alpha), sinAlpha=G_SIN(alpha);

  GDouble angles[4] = {omega_theta, omega_phi, normal_theta, normal_phi};
  ////////////////////////////////////////////////////////////////////////////////////        
  // decode the list of daughter indices in each integer
  // be careful to handle the zero index correctly
  WCUComplex CZero = { 0, 0 };
  WCUComplex COne  = { 1, 0 };

  pcDevAmp[iEvent] = sqrtIntensity(polFraction, b1mass, prod_angle, angles);//omega_theta, omega_phi, normal_theta, normal_phi, m_1p, m_w_1p, m_n_1p, m_1m, m_w_1m, m_n_1m, m_0m, m_w_0m, m_n_0m, m_ds_ratio, m_phi0_1p, m_theta_1p, m_phip_1p, m_phim_1p, m_psi_1p, m_phi0_1m, m_theta_1m, m_phip_1m, m_phim_1m, m_psi_1m, m_phi0_0m, m_theta_0m);
  
  //pcDevAmp[iEvent] = COne;
}


void
GPUomegapiAngAmp_exec( dim3 dimGrid, dim3 dimBlock, GPU_AMP_PROTO, 
                     GDouble m_1p, GDouble m_w_1p, GDouble m_n_1p, GDouble m_1m, GDouble m_w_1m, GDouble m_n_1m,
                            GDouble m_0m, GDouble m_w_0m, GDouble m_n_0m, GDouble m_ds_ratio, GDouble m_phi0_1p,
                            GDouble m_theta_1p, GDouble m_phip_1p, GDouble m_phim_1p, GDouble m_psi_1p,
			    GDouble m_phi0_1m, GDouble m_theta_1m, GDouble m_phip_1m, GDouble m_phim_1m,
                            GDouble m_psi_1m, GDouble m_phi0_0m, GDouble m_theta_0m, bool useCutoff, GDouble polAngle, GDouble polFraction )
{  

  GPUomegapiAngAmp_kernel<<< dimGrid, dimBlock >>>
    ( GPU_AMP_ARGS, m_1p, m_w_1p, m_n_1p, m_1m, m_w_1m, m_n_1m,
                            m_0m, m_w_0m, m_n_0m, m_ds_ratio, m_phi0_1p,
                            m_theta_1p, m_phip_1p, m_phim_1p, m_psi_1p,
			    m_phi0_1m, m_theta_1m, m_phip_1m, m_phim_1m,
                            m_psi_1m, m_phi0_0m, m_theta_0m, useCutoff, polAngle, polFraction );
}



